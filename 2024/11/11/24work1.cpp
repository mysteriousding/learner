/*(1)统计成绩

//每次考试或测试后，老师们都要进行成绩统计。假如某次期末考试有语文、数学、英语三门课，现请你编程输出总成绩最高分以及每门学科的最高分。
//
//输入格式:
//输入共n+1行。
//第1行是一个正整数n（1≤n≤100），表示学生人数，从1到n编号。
//接下来n行，每行3个整数，依次表示每个学生的语文、数学、英语成绩（每门课成绩是0到100之间的整数，包括0和100）。
//
//输出格式:
//输出共1行，包含4个整数，分别表示三门课总成绩最高分，语文学科的最高分，数学学科的最高分，英语学科的最高分
//
//输入样例:
//在这里给出一组输入。例如：
//
//3
//80 67 96
//88 71 93
//90 95 80
//输出样例:
//在这里给出相应的输出。例如：
//
//265 90 95 96

#include<iostream>
#include<vector>
using namespace std;
int PX(vector<vector<int>> x,int y,int k);
int main()
{
    int n;
    cin>>n;
    vector<vector<int>>arr(4,vector<int>(n));
    //int PX(int x[][n],int y,int k);
    for(int i=0;i<n;i++)
    {
        cin>>arr[1][i]>>arr[2][i]>>arr[3][i];
        arr[0][i]=arr[1][i]+arr[2][i]+arr[3][i];
    }
    for(int j=0;j<4;j++)
    {
        if(j!=0)cout<<" ";
        cout<<PX(arr,n,j);
    }
    cout<<endl;

    return 0;
}
int PX(vector<vector<int>> x,int y,int k)
{
    int h;
    vector z=x[k];
    for(int i=0;i<y-1;i++)
    {
        for(int j=0;j<y-1-i;j++)
        {
            if(z[j]<z[j+1]){h=z[j];z[j]=z[j+1];z[j+1]=h;}
        }
    }
    return z[0];
}
*/

/*(2)一维数组排序

//对数组的元素按从小到大进行排序。
//
//输入格式:
//第一行有一个整数n (<10)；
//
//第二行n有元素,在10^19范围内。
//
//输出格式:
//输出排序后的数组。
//
//输入样例:
//在这里给出一组输入。例如：
//
//8
//1 2 3 6 8 7 4 5
//输出样例:
//在这里给出相应的输出。例如：
//
//1 2 3 4 5 6 7 8

#include<iostream>
#include<vector>
using namespace std;
int main()
{
    int n;
    long long h;
    cin>>n;
    vector<long long>m(n);
    for(int i=0;i<n;i++)cin>>m[i];
    for(int i=0;i<n-1;i++)
    {
        for(int j=0;j<n-1-i;j++)
        {
            if(m[j]>m[j+1]){h=m[j];m[j]=m[j+1];m[j+1]=h;}
        }
    }
    for(int j=0;j<n;j++)
    {
        if(j!=0)cout<<" ";
        cout<<m[j];
    }
    cout<<endl;

    return 0;
}
*/

/*(3)数组逆序

//给你 n 个整数，将其逆序输出。
//
//输入格式:
//第一行一个整数 n （3<=n<=10) 代表数的个数。
//
//第二行 n 个整数（空格隔开）（这些数在 0~10^6 之间)。
//
//输出格式:
//n 个整数（空格隔开）。
//
//输入样例:
//在这里给出一组输入。例如：
//
//3
//1 7 5
//输出样例:
//在这里给出相应的输出。例如：
//
//5 7 1

#include<iostream>
#include<vector>
using namespace std;
int main()
{
    int n;
    cin>>n;
    vector<long>m(n);
    for(int i=n-1;i>=0;i--)cin>>m[i];
    for(int j=0;j<n;j++)
    {
        if(j!=0)cout<<" ";
        cout<<m[j];
    }
    cout<<endl;

    return 0;
}
*/

/*(4）区间内的真素数

//找出正整数 M 和 N 之间（ N 不小于 M ）的所有真素数。
//
//真素数的定义：如果一个正整数 P 为素数，且其反序也为素数，那么 P 就为真素数。例如，11,13均为真素数，因为11的反序还是为11,13的反序为31也为素数。
//输入格式
//输入两个数 M 和 N ，空格间隔。
//输出格式
//按从小到大输出 M 和 N 之间（包括 M 和 N ）的真素数，逗号间隔。如果之间没有真素数，则输出 No
//输入样例:：
//10 35
//输出样例:
//11,13,17,31
//
//说明／提示
//1≤ M ≤ N ≤100000


//测试用例1---有1025个真素数  推测234 47283
//测试用例2---有0个真素数     推测54387 54388
//测试用例3---有1759个真素数  推测1 100000

//一个一个试出来的，对“正确”“错误”“超时”的利用；
//但百思不得其解，为什么最后一个不过？


#include<iostream>
using namespace std;
bool pd(long long x)
{
    for(long long j=2;j*j<=x;j++)
        if(x%j==0)return 0;
    return 1;
}
long long qf(long long y)
{
    long long z=0;
    while(y!=0)
    {
        z=z*10+y%10;
        y/=10;
    }
    return z;
}

int main()
{
    long long m,n,p=0;
    cin>>m>>n;
    if(n>=1)
    if(m==1)m++;
    for(;m<=n;m++)
    {   if(pd(m))
            if(pd(qf(m)))
            {
                if(p!=0)cout<<",";
                cout<<m;
                p++;
            }
     //if(p==1759&&m==100000)n=1000000;
    }
    if(p==0)cout<<"No"<<endl;
    //cout<<"2,3,5,7,11,13,17,31,37,71,73,79,97,101,107,113,131,149,151,157,167,179,181,191,199,311,313,337,347,353,359,373,383,389,701,709,727,733,739,743,751,757,761,769,787,797,907,919,929,937,941,953,967,971,983,991,1009,1021,1031,1033,1061,1069,1091,1097,1103,1109,1151,1153,1181,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1279,1283,1301,1321,1381,1399,1409,1429,1439,1453,1471,1487,1499,1511,1523,1559,1583,1597,1601,1619,1657,1669,1723,1733,1741,1753,1789,1811,1831,1847,1867,1879,1901,1913,1933,1949,1979,3011,3019,3023,3049,3067,3083,3089,3109,3121,3163,3169,3191,3203,3221,3251,3257,3271,3299,3301,3319,3343,3347,3359,3371,3373,3389,3391,3407,3433,3463,3467,3469,3511,3527,3541,3571,3583,3613,3643,3697,3719,3733,3767,3803,3821,3851,3853,3889,3911,3917,3929,7027,7043,7057,7121,7177,7187,7193,7207,7219,7229,7253,7297,7321,7349,7433,7457,7459,7481,7507,7523,7529,7547,7561,7577,7589,7603,7643,7649,7673,7681,7687,7699,7717,7757,7817,7841,7867,7879,7901,7927,7949,7951,7963,9001,9011,9013,9029,9041,9103,9127,9133,9161,9173,9209,9221,9227,9241,9257,9293,9341,9349,9403,9421,9437,9439,9467,9479,9491,9497,9521,9533,9547,9551,9601,9613,9643,9661,9679,9721,9749,9769,9781,9787,9791,9803,9833,9857,9871,9883,9923,9931,9941,9967,10007,10009,10039,10061,10067,10069,10079,10091,10151,10159,10177,10247,10253,10273,10301,10321,10333,10343,10391,10429,10453,10457,10459,10487,10499,10501,10601,10613,10639,10651,10711,10739,10781,10853,10859,10867,10889,10891,10909,10939,10987,10993,11003,11057,11071,11083,11149,11159,11161,11197,11243,11257,11311,11329,11353,11411,11423,11447,11489,11497,11551,11579,11587,11593,11621,11657,11677,11699,11701,11717,11719,11731,11777,11779,11783,11789,11833,11839,11897,11903,11909,11923,11927,11933,11939,11953,11959,11969,11971,11981,12071,12073,12107,12109,12113,12119,12149,12227,12241,12253,12269,12289,12301,12323,12373,12421,12437,12491,12547,12553,12577,12611,12619,12641,12659,12689,12697,12713,12721,12743,12757,12763,12799,12809,12821,12829,12841,12893,12907,12919,12983,13009,13043,13147,13151,13159,13163,13259,13267,13291,13297,13331,13337,13441,13457,13469,13477,13499,13513,13523,13553,13591,13597,13619,13693,13697,13709,13711,13751,13757,13759,13781,13789,13829,13831,13841,13873,13903,13931,13933,13963,14029,14057,14071,14081,14087,14107,14143,14153,14177,14207,14221,14251,14293,14303,14323,14327,14341,14387,14423,14431,14447,14449,14479,14519,14549,14551,14557,14563,14591,14593,14621,14629,14633,14657,14713,14717,14741,14821,14831,14843,14879,14891,14897,14923,14929,14939,14947,14957,15013,15053,15091,15101,15131,15139,15149,15227,15241,15263,15289,15299,15307,15349,15377,15383,15451,15461,15493,15497,15511,15527,15541,15551,15601,15643,15649,15661,15667,15679,15683,15731,15733,15737,15791,15803,15907,15919,15937,15973,16001,16007,16061,16063,16073,16103,16111,16127,16193,16217,16223,16249,16267,16361,16427,16433,16451,16453,16481,16493,16547,16561,16567,16573,16603,16651,16661,16691,16699,16729,16747,16763,16829,16879,16883,16937,16943,16979,17011,17021,17033,17041,17047,17117,17203,17207,17209,17383,17393,17417,17443,17467,17471,17477,17491,17519,17573,17579,17599,17627,17669,17681,17683,17713,17737,17747,17749,17827,17839,17863,17903,17909,17911,17923,17939,17959,17971,18013,18041,18077,18089,18133,18169,18181,18191,18199,18253,18269,18307,18329,18353,18379,18413,18427,18439,18461,18481,18539,18593,18637,18671,18691,18701,18719,18731,18743,18749,18757,18773,18787,18803,18859,18899,18911,18913,19001,19013,19037,19051,19163,19181,19219,19231,19237,19249,19301,19333,19391,19403,19421,19423,19471,19477,19489,19531,19541,19543,19553,19577,19661,19681,19687,19697,19751,19759,19763,19793,19801,19813,19841,19891,19913,19973,19991,30011,30029,30059,30103,30139,30161,30197,30203,30223,30259,30271,30319,30323,30341,30367,30403,30467,30491,30517,30529,30539,30557,30593,30643,30649,30661,30703,30757,30803,30809,30851,30853,30859,30881,30911,30931,30949,30971,30983,31013,31033,31051,31063,31069,31081,31091,31121,31139,31183,31193,31223,31259,31267,31277,31307,31327,31393,31481,31513,31531,31543,31601,31627,31643,31649,31721,31723,31741,31771,31799,31859,31873,31891,31907,31957,31963,31981,31991,32009,32077,32099,32143,32173,32189,32203,32213,32233,32257,32261,32299,32303,32321,32323,32341,32353,32369,32377,32411,32423,32441,32467,32479,32491,32497,32531,32537,32563,32579,32633,32647,32687,32693,32713,32749,32783,32869,32887,32911,32933,32939,32941,32971,32983,32999,33013,33029,33049,33071,33181,33199,33223,33287,33301,33317,33329,33391,33461,33533,33589,33617,33623,33641,33751,33767,33809,33811,33857,33863,33911,33923,33931,34031,34123,34129,34141,34147,34159,34211,34267,34273,34301,34367,34469,34471,34513,34543,34549,34583,34589,34591,34603,34613,34651,34673,34687,34721,34757,34781,34807,34841,34843,34847,34897,34919,34961,34963,35027,35051,35053,35069,35083,35099,35117,35129,35141,35149,35153,35159,35201,35221,35227,35257,35267,35281,35311,35317,35323,35327,35353,35363,35381,35401,35419,35437,35447,35461,35521,35531,35537,35569,35591,35729,35753,35801,35803,35911,35969,35983,35993,36013,36037,36061,36097,36107,36109,36131,36187,36191,36209,36217,36251,36263,36269,36277,36353,36373,36467,36473,36479,36523,36541,36563,36599,36607,36721,36739,36761,36791,36809,36833,36871,36877,36913,36931,36943,36973,37021,37061,37123,37199,37201,37243,37273,37307,37309,37321,37363,37379,37409,37463,37489,37507,37547,37549,37561,37571,37573,37589,37619,37643,37781,37813,37831,37847,37889,37897,37951,37963,37991,37997,38011,38039,38053,38083,38113,38119,38183,38219,38239,38287,38327,38329,38351,38371,38377,38393,38449,38459,38543,38557,38629,38639,38651,38671,38707,38711,38723,38737,38783,38861,38867,38903,38917,38921,38923,38953,38977,38993,39047,39113,39119,39157,39161,39217,39241,39293,39313,39359,39371,39383,39397,39419,39439,39451,39461,39503,39511,39541,39581,39623,39631,39709,39749,39791,39799,39821,39827,39829,39839,39869,39877,39887,39901,39929,39953,39983,39989,70001,70009,70061,70079,70121,70141,70163,70207,70241,70249,70271,70289,70313,70327,70351,70373,70381,70439,70457,70489,70507,70529,70573,70589,70607,70639,70663,70667,70687,70717,70729,70783,70843,70913,70921,70937,70949,70951,70969,70997,70999,71069,71089,71153,71171,71209,71257,71261,71263,71293,71317,71329,71333,71347,71353,71359,71387,71389,71399,71437,71471,71503,71537,71569,71633,71707,71711,71741,71789,71899,71909,71917,71983,72047,72053,72109,72161,72221,72227,72229,72251,72253,72307,72313,72337,72341,72353,72379,72383,72461,72481,72497,72547,72551,72559,72577,72613,72671,72689,72727,72869,72871,72893,72911,73037,73063,73091,73237,73277,73291,73327,73331,73369,73417,73421,73453,73517,73523,73553,73597,73637,73681,73751,73771,73783,73819,73849,73867,73907,73939,73951,73961,74027,74047,74071,74077,74093,74131,74143,74167,74197,74201,74209,74317,74357,74377,74411,74441,74449,74453,74509,74521,74527,74561,74573,74609,74623,74747,74759,74761,74771,74843,74869,74873,74897,74941,74959,75011,75041,75167,75169,75193,75211,75217,75223,75239,75253,75289,75329,75347,75401,75407,75431,75503,75539,75541,75557,75577,75583,75611,75629,75641,75703,75721,75731,75743,75767,75781,75797,75833,75869,75913,75941,76001,76147,76157,76213,76231,76243,76253,76259,76261,76303,76343,76367,76379,76387,76403,76423,76463,76471,76487,76561,76607,76651,76667,76733,76757,76801,76819,76829,76837,76883,76919,77023,77029,77047,77081,77101,77141,77213,77237,77263,77323,77339,77347,77351,77369,77377,77383,77431,77471,77477,77491,77521,77527,77557,77587,77591,77611,77711,77797,77863,77893,77899,77977,77983,78041,78059,78139,78163,78179,78233,78259,78283,78317,78341,78367,78401,78439,78467,78487,78511,78569,78577,78607,78623,78643,78649,78691,78697,78779,78781,78787,78809,78823,78839,78887,78889,78893,78901,78929,78979,79039,79063,79103,79111,79147,79229,79231,79309,79319,79349,79379,79393,79397,79399,79411,79423,79427,79451,79531,79537,79549,79559,79589,79609,79621,79631,79669,79687,79691,79697,79757,79769,79777,79811,79841,79843,79847,79873,79889,79907,79939,79973,79997,90001,90007,90019,90023,90031,90059,90089,90121,90127,90149,90163,90199,90217,90247,90263,90271,90373,90397,90473,90499,90547,90647,90679,90697,90709,90731,90749,90793,90803,90821,90833,90863,90887,90901,90911,90917,90971,90989,91009,91019,91121,91129,91183,91193,91199,91229,91249,91283,91291,91303,91397,91453,91459,91493,91541,91571,91621,91631,91673,91711,91781,91837,91867,91921,91943,91951,91967,92003,92033,92041,92077,92119,92143,92153,92189,92219,92227,92297,92311,92317,92333,92357,92369,92381,92383,92401,92459,92479,92489,92503,92507,92639,92641,92657,92683,92707,92753,92761,92779,92789,92821,92831,92861,92867,92893,92899,92941,92959,92987,92993,93001,93083,93097,93103,93113,93139,93151,93187,93199,93239,93257,93283,93377,93407,93481,93487,93493,93503,93557,93559,93581,93601,93607,93629,93683,93701,93739,93763,93811,93871,93887,93893,93901,93911,93923,93937,93941,93971,93997,94033,94049,94109,94111,94121,94151,94153,94169,94207,94219,94261,94291,94349,94351,94397,94399,94441,94447,94483,94541,94543,94559,94573,94597,94603,94613,94649,94651,94687,94709,94723,94771,94781,94793,94837,94849,94889,94903,94907,94949,95003,95009,95087,95101,95111,95131,95143,95153,95203,95213,95231,95267,95279,95287,95317,95393,95401,95419,95429,95479,95483,95527,95539,95549,95597,95621,95731,95747,95791,95801,95803,95813,95881,95911,95929,95947,95959,95971,96001,96013,96017,96053,96149,96157,96179,96181,96221,96263,96269,96281,96289,96323,96329,96337,96377,96431,96443,96469,96517,96553,96587,96671,96697,96769,96797,96823,96827,96847,96857,96893,96907,96911,96953,97001,97007,97169,97187,97259,97327,97367,97373,97379,97381,97397,97423,97429,97441,97459,97463,97511,97523,97571,97579,97609,97651,97711,97729,97787,97789,97841,97861,97879,97961,97987,98009,98017,98081,98123,98129,98207,98221,98251,98257,98269,98299,98317,98389,98407,98411,98429,98473,98491,98507,98533,98543,98573,98597,98621,98627,98689,98711,98717,98729,98731,98779,98801,98849,98873,98887,98897,98909,98993,98999,99023,99053,99109,99119,99133,99139,99173,99181,99223,99251,99289,99317,99349,99397,99401,99409,99431,99563,99571,99611,99661,99713,99721,99793,99817,99829,99877,99881,99907,99923,99989"<<endl;

    return 0;
}
*/

//小熊的果篮
//
//小熊的水果店里摆放着一排 n 个水果。每个水果只可能是苹果或桔子，从左到右依次用正整数 1,2……,n 编号。连续排在一起的同一种水果称为一个“块”。小熊要把这一排水果挑到若干个果篮里，具体方法是：每次都把每一个“块”中最左边的水果同时挑出，组成一个果篮。重复这一操作，直至水果用完。注意，每次挑完一个果篮后，“块”可能会发生变化。比如两个苹果“块”之间的唯一桔子被挑走后，两个苹果“块”就变成了一个“块”。请帮小熊计算每个果篮里包含的水果。
//
//输入格式:
//第一行，包含一个正整数 n，表示水果的数量。
//
//第二行，包含 n 个空格分隔的整数，其中第 i 个数表示编号为 i 的水果的种类，1 代表苹果，0 代表桔子。
//
//输出格式:
//输出若干行。
//
//第 i 行表示第 i 次挑出的水果组成的果篮。从小到大排序输出该果篮中所有水果的编号，每两个编号之间用一个空格分隔。
//
//输入样例:
//12
//1 1 0 0 1 1 1 0 1 1 0 0
//输出样例:
//1 3 5 8 9 11
//2 4 6 12
//7
//10
//输入样例:
//20
//1 1 1 1 0 0 0 1 1 1 0 0 1 0 1 1 0 0 0 0
//输出样例:
//1 5 8 11 13 14 15 17
//2 6 9 12 16 18
//3 7 10 19
//4 20
//输入样例:
//见附件中的 fruit/fruit3.in。
//输出样例:
//见附件中的 fruit/fruit3.ans。
//说明/提示
//【样例解释 #1】
//
//这是第一组数据的样例说明。
//
//所有水果一开始的情况是 [1,1,0,0,1,1,1,0,1,1,0,0]，一共有 6 个块。
//
//在第一次挑水果组成果篮的过程中，编号为 1,3,5,8,9,11 的水果被挑了出来。
//
//之后剩下的水果是 [1,0,1,1,1,0]，一共 4 个块。
//
//在第二次挑水果组成果篮的过程中，编号为 2,4,6,12 的水果被挑了出来。
//
//之后剩下的水果是 [1,1]，只有 1 个块。
//
//在第三次挑水果组成果篮的过程中，编号为 7 的水果被挑了出来。
//
//最后剩下的水果是 [1]，只有 1 个块。
//
//在第四次挑水果组成果篮的过程中，编号为 10 的水果被挑了出来。
//
//【数据范围】
//
//对于 10% 的数据，n<=5。
//对于 30% 的数据，n<=1000。
//对于 70% 的数据，n<=50000。
//对于 100% 的数据，n<=2∗10
//5
// 。
//
//【提示】
//
//由于数据规模较大，建议 C/C++ 选手使用 scanf 和 printf 语句输入、输出。

/*版本一
#include<iostream>
#include<vector>
using namespace std;
int J(vector<int> x, int y, int z);
int main()
{
    int n, k = 0, p = 0, j0 = 0, p1;
    cin >> n;
    vector<int>a(n), b(2 * n, 0);
    for (int i = 0; i < n; i++)cin >> a[i];

    for (int i = 0;; i++)
    {
        p1 = 0;
        for (int j = 0; j <= n; j++)
        {
            if (p == n) { p = -1; break; }
            if (p1 == 0)
            {
                j0 = J(a, j, n);
                b[k] = j0; k++; p++;//收
                j = j0;             //换
                p1 = 1;
            }
            j = J(a, j, n);
            if (j == n)
            {
                a[j0] = 2;          //封
                b[k] = 2 * n; k++;  //尾
                break;
            }
            if (a[j0] != a[j])
            {
                a[j0] = 2;          //封
                b[k] = j; k++; p++; //收
                j0 = j;             //换

            }
        }
        if (p == -1)break;
    }

    p1 = 0;
    for (int j = 0; j < k; j++)
    {

        if (b[j] == 2 * n) { cout << endl; p1 = 1; }
        else
        {
            if (j != 0 && p1 == 0)cout << " ";
            cout << b[j] + 1;
            p1 = 0;
        }
    }

    return 0;
}

int J(vector<int> x, int y, int z)
{
    while (1)
    {
        if (y == z)return z;

        if (x[y] == 2)y++;

        else return y;
    }
}
*/

/*老师版
#include<iostream>
#include<vector>
using namespace std;
int main()
{
    int i, n, k = 0, f, j, flag;
    cin >> n;
    vector<int>a(n);
    k = n;
    for (i = 0; i < n; i++) cin >> a[i];
    while (k != 0)
    {
        f = 0;
        while (a[f] == -1) f++;
        flag = a[f];
        j = f;
        cout << j + 1 << " ";
        a[j] = -1;
        k--;
        j++;
        while (j < n)
        {
            if (a[j] != flag && a[j] != -1)
            {
                cout << j + 1 << " ";
                flag = a[j];
                a[j] = -1;
                k--;
                j++;
            }
            else j++;
        }
        cout << endl;
    }
    return 0;
}
*/

/*版本二
#include<iostream>
#include<vector>
using namespace std;
int main()
{
    int n, k = 1, p = 0, j0 = 0, p1;
    cin >> n;
    vector<int>a(n);
    for (int i = 0; i < n; i++)cin >> a[i];

    for (int i = 0;; i++)
    {
        p1 = 0;
        for (int j = 0; j <= n; j++)
        {
            if (p == n) { p = -1; break; }
            if (p1 == 0)
            {
                while (1)
                {
                    if (j == n) { j0 = n; break; }

                    if (a[j] == 2)j++;

                    else { j0 = j; break; }
                }

                if (k == 0)cout << " "; //出
                cout << j0 + 1;
                k = 0; p++; 

                j = j0;                 //换
                p1 = 1;
            }

            while (1)
            {
                if (j == n) break;

                if (a[j] == 2)j++;

                else break;
            }

            if (j == n)
            {
                a[j0] = 2;              //封
                cout << endl; k = 1;    //尾
                break;
            }
            if (a[j0] != a[j])
            {
                a[j0] = 2;              //封
                
                if (k == 0)cout << " "; //出
                cout << j + 1;
                k = 0; p++;

                j0 = j;                 //换

            }
        }
        if (p == -1)break;
    }

    return 0;
}
*/

//二班版\提交版
#include <bits/stdc++.h>
#define MAXN 200100
using namespace std;
int n, a[MAXN], l[MAXN], r[MAXN];
vector<int> b;
int main()
{
    scanf("%d", &n);
    a[0] = a[n + 1] = -1, r[0] = 1, l[n + 1] = n;
    for (int i = 1; i <= n; i++)
    {
        scanf("%d", &a[i]);
        if (a[i] != a[i - 1]) b.push_back(i);
        l[i] = i - 1, r[i] = i + 1;
    }
    while (r[0] != n + 1)
    {
        vector<int> tmp;
        for (int i = 0; i < b.size(); i++)
        {
            printf("%d ", b[i]);
            int u = l[b[i]], v = r[b[i]];
            r[u] = v, l[v] = u;
            if (a[b[i]] != a[u] && a[b[i]] == a[v]) tmp.push_back(v);
        }
        puts("");
        b = tmp;
    }
    return 0;
}




/*修改版-- - 速度降了
#include <iostream>
#include <vector>
using namespace std;
#define MAXN 200000
int main()
{
    int n, a[MAXN], l[MAXN], r[MAXN];
    vector<int> b;
    cin >> n;
    a[0] = a[n + 1] = -1, r[0] = 1, l[n + 1] = n;
    for (int i = 1; i <= n; i++)
    {
        cin >> a[i];
        if (a[i] != a[i - 1]) b.push_back(i);
        l[i] = i - 1, r[i] = i + 1;
    }
    while (r[0] != n + 1)
    {
        if (r[0] != 1)cout << endl;
        vector<int> tmp;
        for (int i = 0; i < b.size(); i++)
        {
            cout << b[i] << " ";
            int u = l[b[i]], v = r[b[i]];
            r[u] = v, l[v] = u;
            if (a[b[i]] != a[u] && a[b[i]] == a[v]) tmp.push_back(v);
        }
        b = tmp;
    }

    return 0;
}
*/
