/*
一本书的页码从自然数l开始顺序编码直到自然数n。
书的页码按照通常的习惯编排，每个页码都不含多余的前导数字0。
例如，第6页用数字6表示，而不是06或006等。
数字计数问题要求对给定书的总页码n，计算出书的全部页码中分别用到多少次数字0,1，2，…，9。

★编程任务：
给定表示书的总页码的十进制整数n(1≤n≤109)。
编程计算书的全部页码中分别用到多少次的数字0,1,2,3,4,5,6,7,8,9。
*/
#include<iostream>
using namespace std;

// 函数 yz：计算从1到n的所有页码中每个数字0-9出现的次数
void yz(int n)
{
    int arr[10] = { 0 }, x, p = 1; // arr用于存储每个数字0-9出现的次数
    for (int i = 1; i <= n; i++)   // 遍历从1到n的所有页码
    {
        x = i;                     // 当前页码
        while (x)                  // 遍历当前页码的每一位
        {
            arr[x % 10]++;         // 当前位的数字出现次数加1
            x /= 10;               // 移动到下一位
        }
    }
    for (int i = 0; i < 10; i++)   // 打印每个数字0-9出现的次数
        cout << arr[i] << " ";
    cout << endl;
}

// 函数 zs：计算从1到n的所有页码中每个数字0-9在每个位置上出现的次数
void zs(int n)
{
    int arr[10][10] = { 0 }, x;  // arr[i][j]表示第i位上数字j出现的次数
    for (int i = 1; i <= n; i++) // 遍历从1到n的所有页码
    {
        x = i;                   // 当前页码
        for (int j = 0; x; j++)  // 遍历当前页码的每一位
        {
            arr[j][x % 10]++;    // 当前位的数字出现次数加1
            x /= 10;             // 移动到下一位
        }
    }
    for (int i = 0; i < 10; i++) // 打印每个位置上每个数字0-9出现的次数
    {
        for (int j = 0; j < 10; j++)
            cout << arr[i][j] << "\t";
        cout << endl;
    }
    cout << endl << endl;
}

int main()
{
    int n, arr[11] = { 0 }, x = 1, y, z, p = 1; // arr用于存储每个数字0-9出现的次数
    cin >> n; // 输入总页码n

    //zs(n);  // 调用函数zs，计算每个数字在每个位置上出现的次数
    //yz(n);  // 调用函数yz，计算每个数字出现的次数

    // 主逻辑：计算从1到n的所有页码中每个数字0-9出现的次数
    while (x)
    {
        x = n / 10 / p; // 当前位的高位部分
        y = n % p;      // 当前位的低位部分
        z = n / p % 10; // 当前位的数字

        if (z)          // 如果当前位的数字不为0
        {
            arr[1] += (x + 1) * p; // 1到9的数字在当前位上出现的次数
            arr[z] += y + 1 - p;   // 当前位的数字在当前位上出现的次数
            arr[z + 1] -= y + 1;   // 调整后续计算的偏移量
            arr[10] -= x * p;      // 调整后续计算的偏移量
            arr[0] += x * p;       // 0在当前位上出现的次数
        }
        else            // 如果当前位的数字为0
        {
            arr[1] += x * p;               // 1到9的数字在当前位上出现的次数
            arr[10] -= x * p;              // 调整后续计算的偏移量
            arr[0] += (x - 1) * p + y + 1; // 0在当前位上出现的次数
        }

        p *= 10;        // 移动到下一位
    }
    for (int i = 0; i < 10; i++)     // 累加结果，计算每个数字0-9出现的次数
    {
        if (i) arr[i + 1] += arr[i]; // 累加前一位的结果
        cout << arr[i] << "\t";      // 打印每个数字出现的次数
    }

    return 0;
}
