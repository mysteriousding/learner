/*(1)简化的插入排序

//本题要求编写程序，将一个给定的整数插到原本有序的整数序列中，使结果序列仍然有序。
//
//输入格式：
//输入在第一行先给出非负整数N（<10）；第二行给出N个从小到大排好顺序的整数；第三行给出一个整数X。
//
//输出格式：
//在一行内输出将X插入后仍然从小到大有序的整数序列，每个数字后面有一个空格。
//
//输入样例：
//5
//1 2 4 5 7
//3
//输出样例：
//1 2 3 4 5 7

#include<iostream>
using namespace std;
int main()
{
    int a[12],n,m,i;
    cin>>n;
    for(i=0;i<n;i++)
        cin>>a[i];
    cin>>m;
    for(i=n-1;i>=0;i--)
        if(m<a[i])a[i+1]=a[i];
        else break;
    a[i+1]=m;
    for(i=0;i<=n;i++)
        cout<<a[i]<<" ";

    return 0;
}
*/

/*(2)求矩阵的局部极大值

//给定M行N列的整数矩阵A，如果A的非边界元素A[i][j]大于相邻的上下左右4个元素，那么就称元素A[i][j]是矩阵的局部极大值。
//本题要求给定矩阵的全部局部极大值及其所在的位置。
//
//输入格式：
//输入在第一行中给出矩阵A的行数M和列数N（3≤M,N≤20）；
//最后M行，每行给出A在该行的N个元素的值。
//数字间以空格分隔。
//
//输出格式：
//每行按照“元素值 行号 列号”的格式输出一个局部极大值，其中行、列编号从1开始。要求按照行号递增输出；
//若同行有超过1个局部极大值，则该行按列号递增输出。
//若没有局部极大值，则输出“None 总行数 总列数”。
//
//输入样例1：
//4 5
//1 1 1 1 1
//1 3 9 3 1
//1 5 3 5 1
//1 1 1 1 1
//输出样例1：
//9 2 3
//5 3 2
//5 3 4
//输入样例2：
//3 5
//1 1 1 1 1
//9 3 9 9 1
//1 5 3 5 1
//输出样例2：
//None 3 5

#include<iostream>
#include<vector>
using namespace std;
int main()
{
    int n,m;
    bool u=1;
    cin>>n>>m;
    vector<vector<int>>a(n+1,vector<int>(m+1));
    for(int i=1;i<=n;i++)
        for(int j=1;j<=m;j++)
            cin>>a[i][j];
    for(int i=2;i<n;i++)
        for(int j=2;j<m;j++)
            if(a[i][j]>a[i-1][j]&&a[i][j]>a[i][j-1]&&a[i][j]>a[i+1][j]&&a[i][j]>a[i][j+1])
            {
                u=0;
                cout<<a[i][j]<<" "<<i<<" "<<j<<endl;
            }
    if(u)cout<<"None "<<n<<" "<<m<<endl;

    return 0;
}
*/

/*(3)IP地址转换

//一个IP地址是用四个字节（每个字节8个位）的二进制码组成。
//请将32位二进制码表示的IP地址转换为十进制格式表示的IP地址输出。
//
//输入格式：
//输入在一行中给出32位二进制字符串。
//
//输出格式：
//在一行中输出十进制格式的IP地址，其由4个十进制数组成（分别对应4个8位的二进制数），中间用“.”分隔开。
//
//输入样例：
//11001100100101000001010101110010
//输出样例：
//204.148.21.114

#include<iostream>
#include<string>
using namespace std;
int main()
{
    int n,b[8]={1};
    string m;
    for(int i=1;i<8;i++)
        b[i]=b[i-1]*2;
    cin>>m;
    for(int j=1;j<=4;j++)
    {
        n=0;
        for(int i=7;i>=0;i--)
            n+=(m[j*8-i-1]-'0')*b[i];
        if(j!=1)cout<<'.';
        cout<<n;
    }

    return 0;
}
*/
